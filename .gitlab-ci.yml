stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375

build_production:
  stage: build
  image: docker:stable
  environment: production
  services:
    - docker:dind
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"' # MR to main
    - if: '$CI_COMMIT_REF_NAME == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"' # Direct push to main
  before_script:
    - docker --version
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
  script:
    - echo "Building image..."
    - docker build -t $REGISTRY_URL$PROJECT:latest .
    - echo "Compile complete."

build:
  stage: build
  image: docker:stable
  environment: staging
  services:
    - docker:dind
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"' # MR to staging
    - if: '$CI_COMMIT_REF_NAME == "staging" && $CI_PIPELINE_SOURCE != "merge_request_event"' # Direct push to staging
  before_script:
    - docker --version
    - docker login -u $STAGING_REGISTRY_USERNAME -p $STAGING_REGISTRY_PASSWORD $STAGING_REGISTRY_URL
  script:
    - echo "Building image..."
    - docker build -t $STAGING_REGISTRY_URL$STAGING_PROJECT:latest .
    - echo "Compile complete."

test: # This job runs in the test stage.
  stage: test
  image: python:3.10.12-slim
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"' # MR to staging branch
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"' # MR to main branch
    - if: '$CI_COMMIT_REF_NAME == "staging"' # Push to staging branch
    - if: '$CI_COMMIT_REF_NAME == "main"' # Push to main branch
  before_script:
    - apt-get update && apt-get install -y git
    - pip install --upgrade pip
    - pip install --no-cache-dir -r requirements.txt
  script:
    - echo "Running unit tests..."
    - python manage.py runserver 0.0.0.0:8000 &
    - sleep 30
    - python manage.py test
    - echo "Tests completed"

deploy_production:
  stage: deploy
  environment: production
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"' # After MR is merged to main branch
  image: ubuntu:latest
  services:
    - docker:dind
  before_script:
    - echo "Installing ovhai..."
    - apt-get update && apt-get install -y curl bash coreutils unzip
    - curl https://cli.gra.ai.cloud.ovh.net/install.sh | bash # Install ovhai CLI
    - export PATH="/root/bin:$PATH" # Add ovhai to PATH
    - /root/bin/ovhai --version

    - echo "Installing Docker..."
    - apt-get install -y --no-install-recommends docker.io
    - docker --version

    - echo "Logging in to OVH..."
    - /root/bin/ovhai login --username $OVH_USER --password $OVH_USER_PASSWORD
    - echo "Successfully logged in to OVH."

    - echo "Logging in to Docker..."
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
    - echo "Successfully logged in to Docker."
  script:
    - echo "Deploying application..."
    - docker build -t $REGISTRY_URL$PROJECT:latest .;
    - docker push $REGISTRY_URL$PROJECT:latest
    - echo "Application successfully deployed."

    - echo "Updating running task..."
    - /root/bin/ovhai app stop $APP_ID # Stop the running task
    - /root/bin/ovhai app set-image $APP_ID $REGISTRY_URL$PROJECT:latest # Set the image of the task to the latest version
    - /root/bin/ovhai app start $APP_ID # Restart the task
    - echo "Task successfully updated."

deploy:
  stage: deploy
  environment: staging
  rules:
    - if: '$CI_COMMIT_REF_NAME == "staging" && $CI_PIPELINE_SOURCE != "merge_request_event"' # Run after MR is merged to staging branch
  image: ubuntu:latest
  services:
    - docker:dind
  before_script:
    - echo "Installing ovhai..."
    - apt-get update && apt-get install -y curl bash coreutils unzip
    - curl https://cli.gra.ai.cloud.ovh.net/install.sh | bash # Install ovhai CLI
    - export PATH="/root/bin:$PATH" # Add ovhai to PATH

    - echo "Installing Docker..."
    - apt-get install -y --no-install-recommends docker.io
    - docker --version

    - echo "Logging in to OVH..."
    - /root/bin/ovhai login --username $STAGING_OVH_USER --password $STAGING_OVH_USER_PASSWORD
    - echo "Successfully logged in to OVH."

    - echo "Logging in to Docker..."
    - docker login -u $STAGING_REGISTRY_USERNAME -p $STAGING_REGISTRY_PASSWORD $STAGING_REGISTRY_URL
    - echo "Successfully logged in to Docker."
  script:
    - echo "Deploying application..."
    - docker build -t $STAGING_REGISTRY_URL$STAGING_PROJECT:latest .;
    - docker push $STAGING_REGISTRY_URL$STAGING_PROJECT:latest
    - echo "Application successfully deployed."

    - echo "Updating running task..."
    - /root/bin/ovhai app stop $STAGING_APP_ID # Stop the running task
    - /root/bin/ovhai app set-image $STAGING_APP_ID $STAGING_REGISTRY_URL$STAGING_PROJECT:latest # Set the image of the task to the latest version
    - /root/bin/ovhai app start $STAGING_APP_ID # Restart the task
    - echo "Task successfully updated."